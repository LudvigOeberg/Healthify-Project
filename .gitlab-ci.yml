stages:
  - install-dependencies
  #- build
  #- build-image
  #- deploy
  #- pages


install-app-dependencies:
  stage: install-dependencies
  image: node
  script:
    - cd frontend
    - ls -la
    - SRC_HASH_CACHE=`cat src.hash 2> /dev/null || true`; echo $SRC_HASH_CACHE
    - SRC_HASH_CALC=`find package-lock.json -type f | xargs sha1sum | sha1sum | tee src.hash`; echo $SRC_HASH_CALC 
    - if [ "$SRC_HASH_CALC" == "$SRC_HASH_CACHE" ]; then echo "Folder has not changed. Skip Job."; exit 0; fi

    - echo "Now do something long........"
    #- npm ci
    #- npm install react-scripts@3.0.1 -g

  artifacts:
    paths:
      - frontend/node_modules
  cache:
    key: "${CI_JOB_NAME}_${CI_COMMIT_REF_SLUG}" # <jobname>_<branchname>
    paths:
      #- frontend/node_modules
      - frontend/src.hash



.install-app-dependencie:
  stage: install-dependencies
  image: node
  artifacts:
    expire_in: 1 hour
    paths:
      - frontend/node_modules
  only:
    refs:
      - master
    changes:
      - frontend/package-lock.json
  
  script:
    - cd frontend
    - npm ci
    - npm install react-scripts@3.0.1 -g



build-frontend:
  stage: build
  image: node
  needs: ["install-app-dependencies"]
  dependencies:
    - install-app-dependencies
  artifacts:
    expire_in: 1 hour
    paths:
      - frontend/build

  script:
    - cd frontend
    - npm run build



build-app-image:
  stage: build-image
  image: docker.io/buildah/buildah
  needs: ["build-frontend"]
  dependencies:
    - build-frontend
  except:
    changes:
      - public/*
      - "*/README.md"
      - "README.md"

  script:
    - export _BUILDAH_STARTED_IN_USERNS=''
    - export BUILDAH_ISOLATION=chroot
    - export STORAGE_DRIVER=vfs
    - export BUILDAH_FORMAT=docker
    - echo "${CI_REGISTRY_PASSWORD}"
    - echo "${CI_REGISTRY_IMAGE}"
    - echo "${CI_REGISTRY_USER}"
    - echo "${CI_JOB_TOKEN}"
    - buildah build-using-dockerfile --tag "app-frontend" "frontend"
    - buildah push --creds "${CI_REGISTRY_USER}:${CI_JOB_TOKEN}" "app-frontend" "docker://${CI_REGISTRY_IMAGE}/app-frontend:latest"



deploy-app:
  environment: 'production'
  needs: ["build-app-image"]
  dependencies: []
  stage: deploy
  image: lachlanevenson/k8s-kubectl
  script:
    - kubectl apply -f yaml/app-deployment.yaml
    - kubectl apply -f yaml/app-service.yaml
    - kubectl apply -f yaml/app-ingress.yaml



pages:
  stage: pages
  needs: []
  dependencies: []
  script:
    - mkdir .public
    - cp -r * .public
    - mv .public public
  artifacts:
    paths:
      - public
  only:
    refs:
      - master
    changes:
      - public/*